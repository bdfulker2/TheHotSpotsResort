/**
 * This Class is for the Admin to Print reports. The admin will select which 
 * checkboxes for specific rooms and a date range. This GUI implements an 
 * action listener and will once dates are selected the user can check any of 
 * room checkboxes and it will print to a jtextArea. The report has the cost
 * for each day for each associated room. The report also will sum up all the 
 * bookings
 */
package thehotspotsresort;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * This Class is for the Admin to Print reports. The admin will select which 
 * checkboxes for specific rooms and a date range. This GUI implements an 
 * action listener and will once dates are selected the user can check any of 
 * room checkboxes and it will print to a jtextArea. The report has the cost
 * for each day for each associated room. The report also will sum up all the 
 * bookings
 * @author Your Name <Ben Fulker FGCU.EDU>
 */
public class PrintReportGUI extends JFrame implements ActionListener {

    /**
     * Creates new form PrintReportGUI
     * initializes variables and also sets JXDatePicker initial dates
     * Registers actionListeners
     */
    public PrintReportGUI() {
        initComponents();
        setLookAndFeel();
        room1 = false;
        room2 = false;  //used for which room .txt file to read 
        room3 = false;
        room4 = false;
        room5 = false;
        room6 = false;  
        sum = 0;       //for print report sum of all rooms
        dayCounter = 0;     //count how many days of bookings are on report
        oneTimePrintCheck = false;
        startJXDatePicker.setDate(today);  //sets startDatePicker to todays date
        endJXDatePicker.setDate(today);     //sets endDatePicker to todays date
        room1JCheckBox.addActionListener(this);
        room2JCheckBox.addActionListener(this); //actionListeners registers
        room3JCheckBox.addActionListener(this);
        room4JCheckBox.addActionListener(this);
        room5CheckBox.addActionListener(this);
        room6JCheckBox.addActionListener(this);
        startJXDatePicker.addActionListener(this);
        endJXDatePicker.addActionListener(this);  
        this.setLocationRelativeTo(null);
        
    }

    /**
     * This is built by the netbeans gui builder I designed it but it generates
     * the code
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPrintPanel = new javax.swing.JPanel();
        checkBoxPanel = new javax.swing.JPanel();
        room1JCheckBox = new javax.swing.JCheckBox();
        room4JCheckBox = new javax.swing.JCheckBox();
        room2JCheckBox = new javax.swing.JCheckBox();
        room5CheckBox = new javax.swing.JCheckBox();
        room3JCheckBox = new javax.swing.JCheckBox();
        room6JCheckBox = new javax.swing.JCheckBox();
        datePickerJPanel = new javax.swing.JPanel();
        startJXDatePicker = new org.jdesktop.swingx.JXDatePicker();
        endJXDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        printJTextArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        printReportJButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        mainPrintPanel.setBackground(new java.awt.Color(0, 102, 102));

        checkBoxPanel.setLayout(new java.awt.GridLayout(3, 2));

        room1JCheckBox.setText("Room 1");
        checkBoxPanel.add(room1JCheckBox);

        room4JCheckBox.setText("Room 4 ");
        checkBoxPanel.add(room4JCheckBox);

        room2JCheckBox.setText("Room 2");
        checkBoxPanel.add(room2JCheckBox);

        room5CheckBox.setText("Room 5");
        checkBoxPanel.add(room5CheckBox);

        room3JCheckBox.setText("Room 3");
        checkBoxPanel.add(room3JCheckBox);

        room6JCheckBox.setText("Room 6");
        checkBoxPanel.add(room6JCheckBox);

        jLabel1.setText("Start Date");

        jLabel2.setText("End Date");

        javax.swing.GroupLayout datePickerJPanelLayout = new javax.swing.GroupLayout(datePickerJPanel);
        datePickerJPanel.setLayout(datePickerJPanelLayout);
        datePickerJPanelLayout.setHorizontalGroup(
            datePickerJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datePickerJPanelLayout.createSequentialGroup()
                .addGroup(datePickerJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(datePickerJPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, datePickerJPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)))
                .addGroup(datePickerJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startJXDatePicker, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endJXDatePicker, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        datePickerJPanelLayout.setVerticalGroup(
            datePickerJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datePickerJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(datePickerJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startJXDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(datePickerJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endJXDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPrintPanelLayout = new javax.swing.GroupLayout(mainPrintPanel);
        mainPrintPanel.setLayout(mainPrintPanelLayout);
        mainPrintPanelLayout.setHorizontalGroup(
            mainPrintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPrintPanelLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(checkBoxPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(datePickerJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        mainPrintPanelLayout.setVerticalGroup(
            mainPrintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPrintPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(mainPrintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPrintPanelLayout.createSequentialGroup()
                        .addComponent(checkBoxPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(mainPrintPanelLayout.createSequentialGroup()
                        .addComponent(datePickerJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        printJTextArea.setColumns(20);
        printJTextArea.setRows(5);
        printJTextArea.setDragEnabled(true);
        jScrollPane1.setViewportView(printJTextArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel2.setLayout(new java.awt.BorderLayout());

        printReportJButton.setBackground(new java.awt.Color(0, 102, 102));
        printReportJButton.setText("Print Report");
        printReportJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printReportJButtonActionPerformed(evt);
            }
        });
        jPanel2.add(printReportJButton, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPrintPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPrintPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Listens for button click on printReportJButton
     * @param evt 
     */
    private void printReportJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printReportJButtonActionPerformed
        // TODO add your handling code here:
        //If source is printReportJButton JOptionPane message that it printed
         if(evt.getSource()==printReportJButton) {
            JOptionPane.showConfirmDialog(null,
                "Report Sent To Printer", 
                "Confirm Reservation Information",
                JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.INFORMATION_MESSAGE,null);
        }
    }//GEN-LAST:event_printReportJButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void setLookAndFeel() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
                    getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrintReportGUI.class.getName()).
                    log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrintReportGUI.class.getName()).
                    log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrintReportGUI.class.getName()).
                    log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrintReportGUI.class.getName()).
                    log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
   /*     java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrintReportGUI().setVisible(true);
            }
        });*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel checkBoxPanel;
    private javax.swing.JPanel datePickerJPanel;
    private org.jdesktop.swingx.JXDatePicker endJXDatePicker;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPrintPanel;
    private javax.swing.JTextArea printJTextArea;
    private javax.swing.JButton printReportJButton;
    private javax.swing.JCheckBox room1JCheckBox;
    private javax.swing.JCheckBox room2JCheckBox;
    private javax.swing.JCheckBox room3JCheckBox;
    private javax.swing.JCheckBox room4JCheckBox;
    private javax.swing.JCheckBox room5CheckBox;
    private javax.swing.JCheckBox room6JCheckBox;
    private org.jdesktop.swingx.JXDatePicker startJXDatePicker;
    // End of variables declaration//GEN-END:variables
    // End of system Generated start Programmer Generated attributes
    private boolean room1, room2, room3, room4, room5, room6;
   // private String line;
    private int dayCounter;         //counter for booking dates in report
    private Calendar sCal;          //calendar instance
      //ArrayList for storing data in correct date range to be printed on report
    private ArrayList<String> linesOfReservations = new ArrayList<>();
    private static final SimpleDateFormat dateFormatter = new SimpleDateFormat(
            "EE- MMM d- yyyy"
    );
                        //intialized today to todays date
    private static final Date today = Calendar.getInstance().getTime();
    private static String dateOfReservation = dateFormatter.format(today);
    private static boolean oneTimePrintCheck;
    private int sum;
    
    //end of programmer generated variable and attributes
    
    
    /**
     * This method recieves filePath and then reads all lines from the file
     * it takes the start date of a booking and creates a line for each day of a
     * guests stay then checks the dates against a the admins date range and 
     * for each day in that range a new string of selected date from each booking
     * is added to the arrayList linesOfReservations.
     * @param filePath 
     * @calls dateToCalendar
     */
    public void checkDatesForPrintReport(String filePath) {
        File file = null;       //new File from filePath
        try {
            if(room1 == true) {             //room# is true check that .txt file
                file = new File(filePath);  
            }
            if(room2 == true) {
                file = new File(filePath);
            }
            if(room3 == true) {
                file = new File(filePath);
            }
            if(room4 == true) {
                file = new File(filePath);
            }
            if(room5 == true) {
                file = new File(filePath);
            }
            if(room6 == true) {
                file = new File(filePath);
            }
                            //reads all lines from specified file and stores
                            //it in a list<Srring> lines
            List<String> lines = Files.readAllLines(file.toPath());
           
            int length = 0;             //for each line in lines list
            for(String line: lines) {
                if(!line.equals("")) {      //if line not null
                    //each line is ! delimited so split at '!' and store in array
                    String[] array = line.split("!");   
                    //gets start date of booking
                    Date startDate = dateFormatter.parse(array[2]);
                    //assigns endDate of booking
                    Date endDate = dateFormatter.parse(array[3]);
                    //assignes numOfDays in stay to num
                    int num = Integer.parseInt(array[4]);
                    int count = 0;
                    //Returns calendar instance of startDate
                    Calendar testCal = dateToCalendar(startDate);
                    //Returns calendar instance of endJXDatePicker
                    Calendar pickerEnd = dateToCalendar(
                            endJXDatePicker.getDate()
                    );
                    //Returns calendar instance of startJXDatePicker
                    Calendar pickerStart = dateToCalendar(
                            startJXDatePicker.getDate()
                    );
                    //subtract one frome JXpicker start and add 1 to end so 
                    //when the range is checked the actual start and end date 
                    //are included then converted to a date instance of each
                    pickerStart.add(Calendar.DAY_OF_MONTH, -1);
                    pickerEnd.add(Calendar.DAY_OF_MONTH, 1);
                    Date pStart = pickerStart.getTime();
                    Date pEnd = pickerEnd.getTime();
                    int cost = 0; //initializes the cost variable to 0 so every
                                  //time called it resets back to zero
                                  //while count < num
                    while(count < num) {            //date instancestartDate
                        Date inRange = testCal.getTime();
                                  //inRange is in Date Range from JXPicker +- 1
                        if(inRange.after(pStart) && inRange.before(pEnd)) {
                        //if confirmation # is starts with get Static Final cost
                            if(         array[0].startsWith("1") || 
                                        array[0].startsWith("2") ) {
                                cost = CalculateCost.ROOM_1_AND_2_COST;
                                
                            } else if ( array[0].startsWith("3") || 
                                        array[0].startsWith("4") ) {
                                cost = CalculateCost.ROOM_3_AND_4_COST;
                            } else if ( array[0].startsWith("5") || 
                                        array[0].startsWith("6") ) {
                                cost = CalculateCost.ROOM_5_AND_6_COST;
                            }
                 //formats string to be added to linesOfReservations ArrayList       
                            String form = String.format(
                                    "%s \t %s \t %s \t %s \t $%s", 
                                    array[0],           //confirmation #
                                    dateFormatter.format(inRange), //date
                                    array[5],           //first name
                                    array[6],           //last name
                                    cost        //cost of that day based on room
                            );
                                        //adds to ArrayList linesOfReservations
                            linesOfReservations.add(form);
                        }      //add a date to the testCal and loops start over
                        testCal.add(Calendar.DAY_OF_MONTH, 1);
                        count++;            //increments the count
                    }
                }
            }
        }
        catch (IOException ex) {        //catches IOException
            Logger.getLogger(PrintReportGUI.class.getName()).
                    log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {   //catches ParseException
            Logger.getLogger(PrintReportGUI.class.getName()).
                    log(Level.SEVERE, null, ex);
        }
        
    } 
    /**
     * this method converts dates instances to calendar instances
     * @param sDate
     * @return  Calendar 
     */
     public static Calendar dateToCalendar(Date sDate)
    {
        int sMonth, sDay, sYear;  
        SimpleDateFormat monthFormat = new SimpleDateFormat("MMMM");
        SimpleDateFormat dayFormat = new SimpleDateFormat("d");
        SimpleDateFormat yearFormat = new SimpleDateFormat("yyyy");
        String startMonth = monthFormat.format(sDate);
        String startDay = dayFormat.format(sDate);
        String startYear = yearFormat.format(sDate);
            //formated eDate stored in local string end MOnth, day , year
                                 //parse sDay, sYear from string to int
        sDay = Integer.parseInt(startDay);
        sYear = Integer.parseInt(startYear);
                                    //parse eDay, eYear from string to int
                 //used to get int representation of month index locaion
                    //location + 1 is equal to month needed to set Calendar
        String[] monthInYear = { "January", "February", "March", "April", 
                    "May", "June", "July", "August", "September", "October", 
                                                   "November", "December" };
     //this line goes to the above array and gets its index locations number
                         //and adds one to get correct month nubmer		 				
        sMonth = (Arrays.asList(monthInYear).indexOf(startMonth));
                            //print to console to test wont show when 
                            //system acutally runs
        Calendar cal = Calendar.getInstance();      //get calendar instance 
        cal.set(sYear, sMonth, sDay);
        return cal;
    }
  
    @Override
    public void actionPerformed(ActionEvent e) {
        WriteReservationToFile write = new WriteReservationToFile();
        
           //if specified checkbox is check then call checkDateForPrintReport
            //with specified room path as param
        if(room1JCheckBox.isSelected()) {
            room1 = true;
            checkDatesForPrintReport(WriteReservationToFile.getRoom1Path());
        }//it is always a good        
        if(room2JCheckBox.isSelected()) {
            room2 = true;
            checkDatesForPrintReport(WriteReservationToFile.getRoom2Path());
        }
        if(room3JCheckBox.isSelected()) {
            room3 = true;
            checkDatesForPrintReport(WriteReservationToFile.getRoom3Path());
        }
        if(room4JCheckBox.isSelected()) {
            room4 = true;
            checkDatesForPrintReport(WriteReservationToFile.getRoom4Path());
        }
        if(room5CheckBox.isSelected()) {
            room5 = true;
            checkDatesForPrintReport(WriteReservationToFile.getRoom5Path());
        }
        if(room6JCheckBox.isSelected()) {
            room6 = true;
            checkDatesForPrintReport(WriteReservationToFile.getRoom6Path());
        }  
                //if action is performed and linesOfReservations is not null
        if(linesOfReservations != null) {
            printJTextArea.setText("");  //clears any text from previous actions
            printJTextArea.append(       //appends string data to TextArea
                "\n\t            Report Printed " + today + 
                "\n\tFor Date Range :   " +
                dateFormatter.format(startJXDatePicker.getDate()) + "   -   " + 
                dateFormatter.format(endJXDatePicker.getDate())
            );
            printJTextArea.append("\nConfirmation # \t" + "Day in Range \t\t" + 
                                    "First Name \t" + "Last Name\t" + "Cost");
            dayCounter = 0;         //resets day counter for this print
            sum = 0;                //resets sum for each action performed
            for(String lines: linesOfReservations) {//appends each line TextArea
                printJTextArea.append("\n" + lines + "\n");
            }
            for(String line: linesOfReservations) {
                if(line != null) { //for each line != null check confirmation #
                                   //get set cost for that room and += to sum
                    if(         line.startsWith("1") || 
                                line.startsWith("2") ) {
                                sum += CalculateCost.ROOM_1_AND_2_COST;
                    } else if ( line.startsWith("3") || 
                                line.startsWith("4") ) {
                                sum += CalculateCost.ROOM_3_AND_4_COST;
                    } else if ( line.startsWith("5") || 
                                line.startsWith("6") ) {
                                sum += CalculateCost.ROOM_5_AND_6_COST;
                    }
                    dayCounter += 1;    //increment the day counter 1 each line
                    //sum += sum;
                }
            }       //after printing remove from ArrayList linesOfReservations
                    //on next iteration it only has selected data once ArrayList
            for(int i = linesOfReservations.size() - 1; i >= 0; i--) {
                linesOfReservations.remove(i);
            }
           //  appends num of Days in report and sum to bottum of report
            printJTextArea.append(
                    "\n\tNum of Days In Report = " + dayCounter +
                    "\t\tTotal : \t$" + sum
            );
        }
    }
}
